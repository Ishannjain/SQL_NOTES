                                              #SCALING
Scalability is the ability to increase or decrease the capacity of an application or database to meet demand.
                                               #MYSQL
COMMAND=>
mysql -u root -h 127.0.0.1 -P 3306 -p
->In this terminal command, -u indicates the user. We provide the user we want to connect to the database as — root (synonymous with database admin, in this case).
->127.0.0.1 is the address of local host on the internet (our own computer).
->3306 is the port we want to connect to, and this is the default port where MySQL is hosted. Think of the combination of host and port as the address of the database we are trying to connect to!
->-p at the end of the command indicates that we want to be prompted for a password when connecting.

COMMANDS=>
SHOW DATABASES;
CREATE DATABASE `mbta`;
USE `mbta`;
EXAMPLE:
CREATE TABLE `cards` (
    `id` INT AUTO_INCREMENT,
    PRIMARY KEY(`id`)
);
DESCRIBE `cards`;
#DATETYPE OF INTEGER
INT
BIGINT
SMALLINT
MEDIUMINT
TNIYINT
#DATATYPE OF STRING
CHAR() 
VARCHAR()
#DATATYPE OF TEXT
TINYTEXT
TEXT
MEDIUMTEXT
LONGTEXT
#OTHER DATATYPES
BLOB
ENUM
SET
MySQL also provides two other text types: ENUM and SET. Enum restricts a column to a single predefined option from a list of options we provide. For example, shirt sizes could be enumerated to M, L, XL and so on. A set allows for multiple options to be stored in a single cell, useful for scenarios like movie genres.
EXAMPLES:
CREATE TABLE `stations` (
    `id` INT AUTO_INCREMENT,
    `name` VARCHAR(32) NOT NULL UNIQUE,
    `line` ENUM('blue', 'green', 'orange', 'red') NOT NULL,
    PRIMARY KEY(`id`)
);
CREATE TABLE `swipes` (
    `id` INT AUTO_INCREMENT,
    `card_id` INT,
    `station_id` INT,
    `type` ENUM('enter', 'exit', 'deposit') NOT NULL,
    `datetime` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `amount` DECIMAL(5,2) NOT NULL CHECK(`amount` != 0),
    PRIMARY KEY(`id`),
    FOREIGN KEY(`station_id`) REFERENCES `stations`(`id`),
    FOREIGN KEY(`card_id`) REFERENCES `cards`(`id`)
);
#EXPLICIT TYPES
DATE
TIME(fsp)
DATETIME(fsp)
TIMESTAMP(fsp)
YEAR(fsp)
#DATATYPE FOR REAL NUMBERS
FLOAT(4 BYTE SIZE)
DOUBLE PRECISION(8 BYTE SIZE)
DECIMAL(DIGIT,AFTER_DECIMAL)
#ALTER TABLE
EXAMPLE:
COMMAND=>
->ALTER TABLE TABLE_NAME
MODIFY CONDITION;
->ALTER TABLE `stations` 
MODIFY `line` ENUM('blue', 'green', 'orange', 'red', 'silver') NOT NULL;
#STORED PROCEDURES
Stored procedures are a way to automate SQL statements and run them repeatedly.
COMMAND=>
CREATE PROCEDURE NAME
BEGIN
...
END;

Before we create a stored procedure, we need to change the delimited from ; to something else. Unlike SQLite, where we could type in multiple statements between a BEGIN and END (which we need for a stored procedure here) and end them with a ;, MySQL prematurely ends the statement when it encounters a ;.

delimiter //
CALL PROCEDURE_NAME;
EXAMPLE:
delimiter //
CREATE PROCEDURE `sell`(IN `sold_id` INT)
BEGIN
    UPDATE `collections` SET `deleted` = 1 
    WHERE `id` = `sold_id`;
    INSERT INTO `transactions` (`title`, `action`)
    VALUES ((SELECT `title` FROM `collections` WHERE `id` = `sold_id`), 'sold');
END//
delimiter ;
                                             #POSTGRESQL
#DataType of integer
SMALLINT(2 byte size)
INT(4 byte size)
BIGINT(8 bit size)
#DataType of Serial
SMALLSERIAL
SERIAL
BIGSERIAL
COMMAND=>
psql postgresql://postgres@127.0.0.1:5432/postgres
\l for show database
\c use database
\dt datatable
\d
CREATE TYPE "swipe_type" AS ENUM('enter', 'exit', 'deposit'); for ENUM
Date and time is similar like dbms
TIMESTAMP(p)
DATE
TIME(p)
INTERVAL(p)
REAL NUMBERS
MONEY
NUMERIC(precision,scale)
\q for quit
                                         #SCALING 
#FEATURES
#VERTICAL Scaling
->Increasing capacity by increasing a server's computing power.
#HORIZONTAL SCALING
->Increasing capacity by distributing load across multiple servers.
#REPLICATION
->Keeping copies of a database on multiple servers.
TYPES OF REPLICATION
1.)SINGLE LEADER
2.)MULTI LEADER
3.)LEADERLESS
...
#READ REPLICA
->A copy of a database from which data may only be read.
Two Options for communication between servers
1.)Asynchronous(leader communicates with follower databases asynchronously to ensure changes are replicated).
2.)Synchronous(Once the leader processes a write request, it could wait for the followers to replicate changes before doing anything else).
#SHARDING
This involves splitting the database into shards across multiple database servers. A word of caution with sharding: we want to avoid having a database hotspot, or a database server that becomes more frequently accessed than others. This could create an overload on that server.
                                     #ACCESS CONTROL
-> personally identifiable information (PII).
->GRANT privilege,... TO user;
->REVOKE privilege,... FROM user;
                                   #SQL INJECTION ATTACKS
One way to increase security of our database is to use access control and grant only the necessary privileges to each user. However, our applications that use an SQL database could also be exposed to attacks — one of them is an SQL injection attack.
As the name indicates, this involves a malicious user injecting some SQL phrases to complete an existing query within our application in an undesirable way.
#PREPARED STATEMENTS TO PREVENT SQL INJECTION ATTACKS.
COMMAND=>
PREPARE name FROM statement;
example:
A prepared statement is a statement in SQL that we can later insert values into. For the above query, we can write a prepared statement.
PREPARE `balance_check`
FROM 'SELECT * FROM `accounts`
WHERE `id` = ?';
The question mark in the prepared statement acts as a safeguard against the unintended execution of SQL code.
To actually run this statement now and check someone’s balance, we accept user input as a variable and then plug it into the prepared statement.
SET @id = 1;
EXECUTE `balance_check` USING @id;
